%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\checkout\elec4712-elec4713-thesis\simbrain\datasets\abridging2014\nodirection\2014 abridging results by subject compiled - Single brush ABCDE (no direction).csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/09/17 15:07:37

%% Initialize variables.
filename = 'D:\checkout\elec4712-elec4713-thesis\simbrain\datasets\abridging2014\nodirection\2014 abridging results by subject compiled - Single brush ABCDE (no direction).csv';
delimiter = ',';
startRow = 4;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62]);
rawStringColumns = string(raw(:, 1));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

%% Create output variable
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection = table;
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.ANNIE = categorical(rawStringColumns(:, 1));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA = cell2mat(rawNumericColumns(:, 1));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB = cell2mat(rawNumericColumns(:, 2));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD = cell2mat(rawNumericColumns(:, 3));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE = cell2mat(rawNumericColumns(:, 4));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA1 = cell2mat(rawNumericColumns(:, 5));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB1 = cell2mat(rawNumericColumns(:, 6));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD1 = cell2mat(rawNumericColumns(:, 7));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE1 = cell2mat(rawNumericColumns(:, 8));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA2 = cell2mat(rawNumericColumns(:, 9));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB2 = cell2mat(rawNumericColumns(:, 10));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD2 = cell2mat(rawNumericColumns(:, 11));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE2 = cell2mat(rawNumericColumns(:, 12));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA3 = cell2mat(rawNumericColumns(:, 13));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB3 = cell2mat(rawNumericColumns(:, 14));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD3 = cell2mat(rawNumericColumns(:, 15));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE3 = cell2mat(rawNumericColumns(:, 16));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA4 = cell2mat(rawNumericColumns(:, 17));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB4 = cell2mat(rawNumericColumns(:, 18));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD4 = cell2mat(rawNumericColumns(:, 19));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE4 = cell2mat(rawNumericColumns(:, 20));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA5 = cell2mat(rawNumericColumns(:, 21));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB5 = cell2mat(rawNumericColumns(:, 22));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD5 = cell2mat(rawNumericColumns(:, 23));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE5 = cell2mat(rawNumericColumns(:, 24));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.ANNIE1 = cell2mat(rawNumericColumns(:, 25));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA6 = cell2mat(rawNumericColumns(:, 26));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB6 = cell2mat(rawNumericColumns(:, 27));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetC = cell2mat(rawNumericColumns(:, 28));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD6 = cell2mat(rawNumericColumns(:, 29));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE6 = cell2mat(rawNumericColumns(:, 30));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.ANNIE2 = cell2mat(rawNumericColumns(:, 31));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA7 = cell2mat(rawNumericColumns(:, 32));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB7 = cell2mat(rawNumericColumns(:, 33));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetC1 = cell2mat(rawNumericColumns(:, 34));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD7 = cell2mat(rawNumericColumns(:, 35));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE7 = cell2mat(rawNumericColumns(:, 36));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA8 = cell2mat(rawNumericColumns(:, 37));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB8 = cell2mat(rawNumericColumns(:, 38));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetC2 = cell2mat(rawNumericColumns(:, 39));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD8 = cell2mat(rawNumericColumns(:, 40));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE8 = cell2mat(rawNumericColumns(:, 41));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA9 = cell2mat(rawNumericColumns(:, 42));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB9 = cell2mat(rawNumericColumns(:, 43));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetC3 = cell2mat(rawNumericColumns(:, 44));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD9 = cell2mat(rawNumericColumns(:, 45));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE9 = cell2mat(rawNumericColumns(:, 46));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA10 = cell2mat(rawNumericColumns(:, 47));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB10 = cell2mat(rawNumericColumns(:, 48));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetC4 = cell2mat(rawNumericColumns(:, 49));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD10 = cell2mat(rawNumericColumns(:, 50));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE10 = cell2mat(rawNumericColumns(:, 51));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA11 = cell2mat(rawNumericColumns(:, 52));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB11 = cell2mat(rawNumericColumns(:, 53));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetC5 = cell2mat(rawNumericColumns(:, 54));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD11 = cell2mat(rawNumericColumns(:, 55));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE11 = cell2mat(rawNumericColumns(:, 56));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetA12 = cell2mat(rawNumericColumns(:, 57));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetB12 = cell2mat(rawNumericColumns(:, 58));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetC6 = cell2mat(rawNumericColumns(:, 59));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetD12 = cell2mat(rawNumericColumns(:, 60));
abridgingresultsbysubjectcompiledSinglebrushABCDEnodirection.TargetE12 = cell2mat(rawNumericColumns(:, 61));

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp rawNumericColumns rawStringColumns R idx;